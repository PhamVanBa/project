Coi lại bài cũ
https://drive.google.com/drive/folders/1CBwq7A_q-muyoDfNv0rkeXRaxTiDJIvY?fbclid=IwAR3mXo81Mysxkb_eIaZj73MmFr7d_l8n2R1PUimT8uY6Wq9VP_t6uhOgAg4


Video bài mới
https://classroom.google.com/u/3/w/Mzk5NjM0NzEyOTU1/t/all

Tao bang nhanh và nhiều
https://www.mockaroo.com/

Đáp Án javaScript
https://drive.google.com/drive/folders/1CpLqGKgH_lAK9f-pRp5qMcyGuFfWGR22?fbclid=IwAR3t27Zm-w9f01EVi6NgtB3hTjh_0yneeohCXw499Wyii5EHrpMHgY0F-6A


1 thục hiện tablet a câu sql nào sẽ thu dk tablet b?
	B select depa_code,e_ID,nam from A
2 từ kháo like trong sql thường dk sử dụng với lệnh?
	A where
3 toá tử nào đẻ lấy ra các cột đặt biệt từ tablet trong 1 cơ sở dư liệu
	A join
4 câu lệnh sql nào có thể ínert 1 hàng mới vào student tablet
	B insert into(..) values(..)
5 thực thi câu lệnh bên dưới ta thu dk bao nhiêu hàng
	B 3
6 câu lệnh nào có thể insert vào ban ghi tablet persons
	C insret into persons values ()
7 câu lệnh sql sau đây là kiểu join nào
	B cross join
8 những phép toán đại số quan hệ nào sau đây ko yêu cầu các tablet tham gia phải tương thích với nhau về column và dâttype của mỗi column?
	D join
9 bạn có 1 datatbase có chưa các tablet customer và orders 2 tablet này có liên két với nhau bởi column cútomerid bạn cần phải tạo 1 câu XQuery để trả về tên của tất cả các khách hàng có column và customerName và thời gian đặt hàng của mỗi đơn hàng có column là orderdate
kết quả chỉ bao gồm các customer chưa đặt bất kỳ 1 đơn hàng nào
	D select customername, orderdate
	from customer
	left outer join orders
	ơn customer.customerid = orders.cútomerid
10 câu lệnh nào đúng để thay đổi hánen thành Nilsen trong cột lastname của tablet persors
	B update persons set lastname = nilsen where lastname = hánen
11 câu lệnh sql nào có thể lấy ra tất cả các hàng của tablet Contest với điều kiệncột contestdate có giá tri lớn hơn hoặc bằng ngày 25 tháng 5 năm 2006?
	D select *
	from contest
	thẻ cóntestdate >= ’2006-05-25’
12 coa bao nhiêu tablet có thể có trong 1 lần John?
	D tất các lựa chọn trên 
13 subquery có thể lồng nhau nhiều lần
	A true
14 câu lệnh nào có thể lấy tên của những nhân viên có lương lớn hơn hoặc bằng 10000$ từ tablet human_resource?
	D select employee_name
	from human_resouree
	Where salary >= 10000
15 bạn có 1 dâtbase có chứa 2 tablet tên la internalsalesorder và 
	A union all
16 bạn có 1 table tên là employees và bạn muốn xác định ng giảm sát của mỗi nhân viên supervisor bạn sẽ sử dụng loại John nào dưới đây
	C. Left join
17 bạn có 2 table tên là customer and salesỏder trong table customer bạn có 1000 customer trong đó có 900 customer đã đặt hàng trong tablet 
	B 900 bản ghi trong table cu
18 điều nào sau đây là một trong những cách tiếp cận cơ bản để John các table?
	D all of the mentionned options
19 1 câu XQuery union là ?
	C kết hợp putput từ nhiều câu XQuery và chỉ bao gồm số lượng các column giống nhau
20 phát biểu nào sau đây là đúng với subquery?
	A liên qua n đến việc sủ dụng truy vấn bên trong và bên ngoài inner và outer XQuery
21 bạn có ứng dụng của bên thứ 3 chèn dữ liệu vào tablet bạn thêm 2 cột mới vào tablet các cột này ko thể sử dụng các ràng buộc mặc định bạn cần đảm bảo rằng các cột mới ko phải vỡ ứng dụng của bên thứ 3 những gì bạn nên làm?
	
22 1 function return về 1 giá trị và chỉ có 1 output parameter?
	A true
23 trigger đk lưu thành 1 khối Xcode và phải gọi thì mới hoạt đọng?
	B false
24 câu nào đúng về shure routines và triger?
	A cả 2 đều bao gồm mã thủ tục
25 câu nào đúng về procedure?
	C chúng bao gồm câu lệnh thủ tục và câu lệnh sql


2. Primary key (khóa chính)
	 Là 1 trường khác null và giá trị trong trường không trùng nhau
	 Có thể là 1 trường hoặc một nhóm trường
	 Một bảng chỉ có thể có nhiều nhát một khóa chính
	 Không phải tất cả các bảng đều có khóa chính

3. Foreign key (khóa phụ)
	Các giá trị có thể trùng nhau, có thể null
	Không phải primary key của table, mục đích chỉ đề lấy thêm thông tin từ table khác
	Xác định mối quan hệ giữa 2 bảng

4. Unique key (khóa duy nhất)
	Nếu 1 field là Unique key thì sẽ không có giá trị nào trong field đó trùng lặp nhau
	(các giá trị trong cột đó khác nhau)
	Có thể chứa nhiều nhất 1 giá trị null (không thể chứa 2 giá trị null)

5. Default
	Gán value default cho 1 trường nào đó, khi không insert value vào trường đó thì SQL
	sẽ tự động lấy value default cho trường đó

5. Các kiểu dữ liệu database
	Có các loại dữ liệu là: Number, String, Date và time, Money, …
a. Number
	Có 2 kiểu number là số thực và số nguyên (Interger)

ii. Số thực
Float (4 byte)
Double (8 byte)

DISTINCT
	Loại bỏ các giá trị trùng lặp trong column

g) GROUP BY/ HAVING
	Để nhóm các giá trị lại gần nhau (group) sau đó thực hiện tính toán với
	Aggregate Functions (count, sum, min, max, avg)
	Group by có thể áp dụng với nhiều column
	Nếu muốn có điều kiện trong Group by thì sử dụng HAVING
	Phân biệt HAVING và WHERE
	HAVING phải đi kèm với
	Aggregate Functions

WHERE không đi kèm với Aggregate Functions,
	mà chỉ đi kèm với các điều kiện bình thường
 HAVING giống WHERE nhưng áp dụng với Aggregate Functions


 JOIN Áp dụng khi muốn lấy thêm thông tin từ các table khác

 UNION áp dụng khi muốn gộp các record từ các câu SELECT (result set) lại với nhau.

o NO ACTION
	Dùng với ON DELETE hoặc ON UPDATE, nghĩa là không
	làm gì với dữ liệu con khi dữ liệu mẹ bị xóa hoặc cập nhật.

o CASCADE
	Dùng với ON DELETE hoặc ON UPDATE, nghĩa là dữ liệu
	con bị xóa hoặc cập nhật khi dữ liệu mẹ bị xóa hoặc cập nhật.

o SET NULL
	Dùng với ON DELETE hoặc ON UPDATE, nghĩa là dữ liệu
	con được đặt là NULL khi dữ liệu mẹ bị xóa hoặc cập nhật.

o SET DEFAULT
	Dùng với ON DELETE hoặc ON UPDATE, nghĩa là dữ liệu
	con được đặt thành giá trị mặc định khi dữ liệu mẹ bị xóa hoặc cập nhật

2. VIEW
	 Một view có thể coi như logic của table, và là một &quot;bảng ảo&quot; có nội dụng được
		xác định từ một câu truy vấn
	 View không lưu trực tiếp data trong Database  Khi thay đổi dữ liệu của các
		bảng có liên quan đến View, thì khi truy xuất vào View, dữ liệu sẽ thay đổi

 Ưu điểm
	o Bảo mật dữ liệu
	o Đơn giản hóa các thao tác truy vấn dữ liệu
	o Tập trung và đơn giản hóa dữ liệu
	o Độc lập với structure của table
	o Thường dùng làm report

 Nhược điểm
	o Query lâu hơn bình thường (do phải chuyển đổi từ select  View)

View: dùng để lưu thông tin 1 đối tượng
	Store routines: dùng để lưu các nhiệm vụ (hành động) hay dùng
	Bao gồm 2 loại là Store procedure và function


JAVA

DATATYPE
	Có 2 loại data type : Primitive(nguyên Thuỷ) , Tự định nghĩa (đối tượng)
	pimitive : Số Nguyên : byte, short, int, long
			Số Thực : float, double
			Kí Tự : char (để lưu 1 kí tự)
				    String (để lưu 1 chỗ kí tự)
			Logic : boolean(1 bit)
	DATE : gồm có 3 loại : Data, LocalDate, Calendar
	Enum: Sử dụng để định nghĩa ra kiểu dữ liệu của người dùng
	Array: Để lưu 1 danh sách các giá trị
	Object: Bao gồm property (thuộc tính) và method (phương thức)
	Cách đặt tên thuộc tính
		o Tên thuộc tính phải là danh từ
		o Không viết hoa chữ cái đầu tiên và viết hoa các chữ cái đầu tiên của mỗi từ tiếp theo
		o Đối với datatype kiểu là boolean thì phải có is ở trước (VD: isCorrect)
		o Đối với datatype là ENUM thì phải viết hoa tất cả các ký tự và các từ phân biệt nhaubằng dấu _
Boxing Và UnBoxing
	Boxing : primitive sang wrapper class
		Autoboxing hay Boxing là quá trình chuyển dữ liệu từ kiểu tham trị sang kiểu tham chiếu.
	UNBoxing: wrapper class sang primitive
		Unboxing là quá trình ngược lại với Boxing, tức là đưa từ kiểu tham chiếu ra kiểu tham trị. Quá trình này sẽ 
		được thực hiện một cách tường minh. Gồm có 2 bước :
		Bước 1 : Kiểm tra chắc chắn rằng đối tượng đã được boxing đúng kiểu giá trị đưa ra.
		Bước 2 : Copy giá trị sang biến dữ liệu kiểu tham trị.

	So sánh Autoboxing và Unboxing
		Trong java có 2 kiểu dữ là: kiểu dữ liệu nguyên thủy (Primitivies type) như int, double… và kiểu 
		dữ liệu tham chiếu (parameter) như các Wraper class: Integer, Double…
		Các wrapper class là các đối tượng, do vậy khi ta ”khai báo kiểu Wrapper”  thì giá trị mặc định 
		được gán là null, còn đối với kiểu “khai báo kiểu nguyên thuỷ” thì giá trị mặc định được gán là 0.
		Java tự động thực hiện autoboxing để chuyển đổi (convert) Primitivites type về Wrapper class 
		tương ứng. Do đó, với kiểu “khai báo kiểu Wrapper”  thì nó đã là là một wrapper class rồi, không 
		cần bước convert nữa, do đó hiệu suất thực hiện của chương trình sẽ cao hơn kiểu “khai báo kiểu nguyên thuỷ”.


Flow control
		if…else dùng đk ít trường họp còn Sưitch…..Case dùng đk nhiều trường hợp hơn
	a. If.. else
		 Biểu thức điều kiện có giá trị là true hoặc false
		Thực hiện từng trường hợp 1
		Tối đa là 3 if else. Nếu 4 if else thì dùng switch case
	b. Switch…Case
		Thực hiện tất cả case cùng lúc
		Nhanh hơn, tốn hiệu năng nhiều hơn
	c. For
		Tối thiểu không chạy lần nào
	d. While
		Trong khi mệnh đề điều kiện còn đúng thì còn thực hiện công việc
		Lặp ít nhất 0 lần
	e. Do while
		Thực hiện trước rồi kiểm tra điều kiện
		Lặp ít nhất 1 lần
	f. Continue
		Continue sẽ tiếp tục vòng lượt tiếp theo của vòng for (không chạy các câu lệnh ở dưới)
	g. Break
		được sử dụng để thoát ra khỏi switch, loop hoặc block
	% Phép Lấy modul (giá trị trả về là phần dư của phép chia ) 5%2 (4/2= 2 dư 1)
Comparable (interface)
		Để so sánh chỉ 1 option 
		1 class chỉ implement 1 comparable
		Chỉ chứa method CompareTo() 
		Không tách được các tiêu chí so sánh ra
CompareTo(Object obj) 
		Dùng để so sánh đối tượng hiện tại với 1 đối tượng khác, sắp xếp list đối tượng
		Phải implement ở đối tượng cần so sánh
		Note: Check Object = null
		Using: Collections.sort(list); 
Comparator (interface) 
		Định nghĩa so sánh multi-option
		Chứa 2 method Compare() và equals()
Compare(Object obj1, Object obj2)
		Compare() định nghĩa chính xác cách sắp xếp, so sánh giữa nhiều đối tượng
		Không nhất thiết phải implement ở đối tượng cần so sánh, có thể tách ra inner class
Equals(Object obj)
	Equals() là so sánh giá trị (== là so sánh địa chỉ)
Constructor
	Sử dụng để khởi tạo các property của object
	Được gọi khi khởi tạo object
		VD: new Department()
		Object obj = new Object()  sẽ gọi method constructor của Object
	Mỗi 1 object luôn có 1 constructor default (không parameter)
	Khi khai báo constructor khác thì constructor default sẽ mất đi
	Có thể có nhiều Constructor trong 1 Object (overloading)
Access modifier
	Áp dụng cho variable, method, constructor

	Access
	Modifier  	Class    Package    Subclass    World
	public 	          Y         Y 		Y 	  Y
	protected 	  Y 	    Y 		Y 	  N
	default           Y	    Y	 	N 	  N
	private           Y	    N		N	  N

	Private: Chỉ truy cập được trong class
			Muốn lấy/thay đổi giá trị của thuộc tính Private thì thông qua phương thức getter/setter
			 (có thể chỉnh sửa logic ở đây)
	Protected: Chỉ xảy ra trong quan hệ kế thừa (có thể khác package) và trong cùng 1 package
	Default: Không Khai báo VD: int a;  Dùng trong 1 package
	Pubilc: Sử dụng ở mọi nơi trong project
OOP
	a. Phân tích bài toán lập trình
	Lập trình hướng đối tượng là
		 Phân tích bài toán thành các đối tượng
		Mỗi đối tượng sẽ gồm các thuộc tính và phương thức.
		o Để giải quyết bài toán chúng ta xây dựng mối quan hệ giữa các đối tượng
		o Và cho các đối tượng thực thi phương thức của chính nó
	Đối tượng là 1 thực thể sống, hành vi(method) của mình, đặc điểm của mình( thuộc tính)
	b. Xây dựng các mối quan hệ giữa các đối tượng
		 Is-a
			Kế thừa hoặc đa hình thể hiện cho is-a
			VD: A is-a B // Tức là Object A extends (implement) Object B
		Has-a (phụ thuộc)
			Nếu đối tượng A phụ thuộc vào đối tượng B thì đối tượng B trở thành
			thuộc tính đối tượng A
		Song Song
			Xảy ra khi các đối tượng không liên quan gì tới nhau cả nhưng lại muốn
			lấy thông tin của nhau thì phải qua 1 đối tượng trung gian
Các tính chất của OOP
	Encapsulation (Tính đóng gói ,che giấu thông tin):
		o Thể hiện qua access modifier Private
		o Không cho phép người sử dụng các đối tượng thay đổi trực tiếp trạng thái của
		đối tượng. Chỉ có các phương thức getter/setter của đối tượng đó mới cho
		phép thay đổi trạng thái của nó.  bảo đảm tính toàn vẹn của đối tượng
	Inheritance (Kế thừa)
		Những thuộc tính chung ở Super Class thì Sub Class không được viết vào
		 Các class con thừa kế tất cả các phương thức và thuộc tính của lớp cha cho phép
	Abstraction (Tính trìu tượng hóa)
		Thể hiện qua Abstract và interface
			Abstract class, Abstract method
			Interface
	Polymorphism (Đa hình)
		Thể hiện qua Override và Overload
		Quy về thằng cha để quản lý, khi cần thì có thể ép kiểu dữ liệu về thằng con
		Khi kế thừa xảy ra, thay vì quản lý danh sách các đối tượng con, chúng ta
		khi cần ép kiểu thì phải check kiểu dữ liệu bằng keyword instanceof

		Override (ghi đè phương thức)
			mô tả việc ghi lại, ghi đè hoặc viết lại phương thức đã được xây dựng ở class cha trong class con
		Overload (nạp chồng phương thức)
			Là phương thức có cùng tên nhưng khác tham số truyền vào (có thể khác số
			lượng tham số hoặc khác datatype)
Try…..catch…….finally
	Cho phép chạy câu lệnh sai mà không bị chết đứng chương trình khi đang chạy
	finally lúc nào cũng hiển thị thực hiện khối câu lệnh đó
Throw và Throws
	Throw: &quot;quăng ra&quot;, có thể &quot;quăng&quot; ở bất kỳ dòng nào trong phương thức.
		Nếu method đó có khả năng xử lý lỗi thì ta xử lý luôn bằng cách đặt try
		catch, nếu method đó không có khả năng xử lý thì ta sẽ ném lên method
		cha để xử lý bằng cách throw lên trên
		( Quang Nỗi ra do m tựu định nghĩa để đưa ra )
	Throws: &quot;Ném đi&quot;, chỉ có phương thức mới sử dụng throws, cảnh báo
		method cha là method con có lỗi, method cha bắt buộc phải xử lý lỗi của method con
Stack trace
	Ngăn xếp Stack Trace mô tả cơ chế thực thi các method và xử lý exception

	1:static
		Tất cả các static property, static method sẽ được load lên đầu tiên khi chương trình bắt đầu chạy
		Property, method có static thì sẽ thuộc về Object
	1:final
		Khai báo 1 số không thể thay đổi (là giá trị cuối cùng ) không thể đổi
1. HashTable (bảng băm)
	Các method insert và search rất nhanh (kể cả khi data lớn)
2. Collection
	Collection là một đối tượng java cung cấp sẵn để lưu trữ và thao tác trên dữ liệu có
		cấu trúc (chỉ quản lý các Object, ko quản lý dữ liệu primitive)
	Kiểu dữ liệu của Collection phải đồng nhất (kế thừa hoặc đa hình)
	a. List (interface)
		Là danh sách cấu trúc dữ liệu tuyến tính trong đó các phần tử được sắp sếp theo 1 thứ tự nhất định
		Các phần tử trong list có thể trùng nhau
		Có thể convert sang array
		Các method hay dùng : size(), add(), get(index), remove(index), clear()
		Stack vào trước ra sau
	b. Set (interface)
		Mỗi phần tử trong set chỉ xuất hiện duy nhất một lần
3. Map
	Quản lý dữ liệu theo dạng key - value.
	Truy cập data theo key
	Giống Set nhưng giá trị các phần tử trong map có thể trùng nhau nhưng key thì phải khác nhau
	Chuyển đổi qua Set thông qua method keySet();

StringBuffer vs StringBuilder
		StringBuilder và StringBuffer là khá giống nhau, điều khác biệt là tất cả các 
		phương thức của StringBuffer đã được đồng bộ, nó thích hợp khi bạn làm việc với 
		ứng dụng đa luồng, nhiều luồng có thể truy cập vào một đối tượng StringBuffer 
		cùng lúc. Trong khi đó StringBuilder có các phương thức tương tự nhưng không 
		được đồng bộ, vì vậy mà hiệu suất của nó cao hơn, bạn nên sử dụng StringBuilder 
		trong ứng dụng đơn luồng, hoặc sử dụng như một biến địa phương trong một phương thức.



1 B step over
2 A 
3 B 1 loi 2 chay
4 B 55
5 D method main ko the
6 B Test Test() {}
7 C tat ca
8 A //Looks like a comment
9 B A-Z,a-z
10 C null
11 object o1 cua Islas A try cap
	C class cha cua A
12 
	A Interface
13 C 3
14 ket qua cua việc compile va run Doan code sau la gi?
	C Error: 
15 interface la gi
	C la 1 loai abstract class
16 A
17 C compile
18 C No such file found, Doing finally, -1
19 C Compatỏ<T>compa
20 B Finally
21 D Nav.Dirrection d = Nav.Direction.NORTH
22 C OuterClass m= new OuterClass();
	OuterClass
23 B OuterClass.InnerClass b = f.new InnerClass();
24 C Connection
25 B ResultSet
26 B SQL staenment
27 C 1-3-2-4
28 A Ỏ mapping (object to relational)
29 C 8
30 D JDBC
31 C ?
32 C Resultset
33 A Connection
34 C executeUpdate()
35 B ….. Update(Que
36 B rs.getString(1)
37 A JDBC
38 1 cóntructor tự động đk gọi khi 1 oject đk khởi tạo có đúng ko
	A true
39 A FALSE
40 A object

So sánh Mật khẩu có 1 ký tự viết hoa
Pattern.matches("(.*[A-Z].*)", "Sdfgdfg#$$sdj1213")

String a = “hbsdshdjhd”;
Sýtem.out.println(a.leng());

tao web xem phim
https://sharecode.vn/source-code/react-js-movie-website-xem-phim-mien-phi-va-trai-nghiem-muot-ma-28908.htm





